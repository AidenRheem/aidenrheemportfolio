export default BaseShader;
type BaseShader = SvelteComponent<$$__sveltets_2_PropsWithChildren<{
    width: string | undefined;
    height: string | undefined;
    canRender: boolean;
    maxSize: number;
    render: () => void;
    rerenderEveryFrame: boolean;
    forceAnimation: any;
    updateContainerSize: (containerWidth: number, containerHeight: number) => void;
    updateOffset: (offsetX: number, offsetY: number) => void;
    updateScale: (scale: number) => void;
    updateTime: (time: number) => void;
    canvasElement: HTMLCanvasElement;
    offsetFromBottom?: boolean | undefined;
    updateCanvasSize?: ((canvasWidth: number, canvasHeight: number) => void) | undefined;
    requestRender?: (() => void) | undefined;
}, {
    default: {};
}>, {
    [evt: string]: CustomEvent<any>;
}, {
    default: {};
}> & {
    $$bindings?: string | undefined;
} & {
    requestRender: () => void;
};
declare const BaseShader: $$__sveltets_2_IsomorphicComponent<$$__sveltets_2_PropsWithChildren<{
    width: string | undefined;
    height: string | undefined;
    canRender: boolean;
    maxSize: number;
    render: () => void;
    rerenderEveryFrame: boolean;
    forceAnimation: any;
    updateContainerSize: (containerWidth: number, containerHeight: number) => void;
    updateOffset: (offsetX: number, offsetY: number) => void;
    updateScale: (scale: number) => void;
    updateTime: (time: number) => void;
    canvasElement: HTMLCanvasElement;
    offsetFromBottom?: boolean | undefined;
    updateCanvasSize?: ((canvasWidth: number, canvasHeight: number) => void) | undefined;
    requestRender?: (() => void) | undefined;
}, {
    default: {};
}>, {
    [evt: string]: CustomEvent<any>;
}, {
    default: {};
}, {
    requestRender: () => void;
}, string>;
type $$__sveltets_2_PropsWithChildren<Props, Slots> = Props & (Slots extends {
    default: any;
} ? Props extends Record<string, never> ? any : {
    children?: any;
} : {});
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import("svelte").ComponentConstructorOptions<Props>): import("svelte").SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
